// Generated by CoffeeScript 2.0.0-alpha1
var Draggable, blockFrames, seals, unblockFrames;

Draggable = class Draggable {
  constructor(el, arg) {
    var drag, handle, start, stop;
    handle = arg.handle, start = arg.start, drag = arg.drag, stop = arg.stop;
    this.el = el;
    this.handle = handle;
    this.start = start;
    this.drag = drag;
    this.stop = stop;
    this._buildHandlers();
    this.handle.addEventListener('mousedown', this.mousedown);
  }

  _buildHandlers() {
    this.mousedown = (e) => {
      e.stopPropagation();
      this.baseXY = {
        x: e.clientX,
        y: e.clientY
      };
      this.baseRect = this.el.getBoundingClientRect();
      document.addEventListener('mousemove', this.mousemove);
      document.addEventListener('mouseup', this.mouseup);
      if (typeof this.start === "function") {
        this.start();
      }
      return blockFrames();
    };
    this.mousemove = (e) => {
      var left, s, top;
      e.stopPropagation();
      e.preventDefault();
      s = this.el.style;
      top = this.baseRect.top + (e.clientY - this.baseXY.y);
      left = this.baseRect.left + (e.clientX - this.baseXY.x);
      s.top = `${Math.max(0, Math.min(window.innerHeight - this.baseRect.height, top))}px`;
      s.left = `${Math.max(0, Math.min(window.innerWidth - this.baseRect.width, left))}px`;
      return typeof this.drag === "function" ? this.drag() : void 0;
    };
    return this.mouseup = (e) => {
      e.stopPropagation();
      e.preventDefault();
      document.removeEventListener('mousemove', this.mousemove);
      document.removeEventListener('mouseup', this.mouseup);
      if (typeof this.stop === "function") {
        this.stop();
      }
      return unblockFrames();
    };
  }

  destroy() {
    document.removeEventListener('mousemove', this.mousemove);
    document.removeEventListener('mouseup', this.mouseup);
    return this.handle.removeEventListener('mousedown', this.mousedown);
  }

};

seals = [];

blockFrames = function() {
  var height, i, iframe, len, ref, ref1, results, seal, width;
  ref = document.querySelectorAll('iframe');
  results = [];
  for (i = 0, len = ref.length; i < len; i++) {
    iframe = ref[i];
    ref1 = iframe.getBoundingClientRect(), width = ref1.width, height = ref1.height;
    seal = document.createElement('div');
    seal.style.position = 'absolute';
    seal.style.width = `${width}px`;
    seal.style.height = `${height}px`;
    iframe.parentNode.insertBefore(seal, iframe);
    results.push(seals.push(seal));
  }
  return results;
};

unblockFrames = function() {
  var results, seal;
  results = [];
  while (seals.length > 0) {
    seal = seals.pop();
    results.push(seal.parentNode.removeChild(seal));
  }
  return results;
};

export default Draggable;